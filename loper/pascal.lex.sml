(*#line 89.10 "pascal.lex"*)functor PascalLexFun(structure Tokens : Pascal_TOKENS)(*#line 1.1 "pascal.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "pascal.lex"*)structure Tokens = Tokens
type pos = int
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) token

open Tokens

val lineNum = ref 0
val eof = fn () => EOF(!lineNum,!lineNum)


structure KeyWord : sig
                        val find : string ->
                                 (int * int -> (svalue,int) token) option
                    end =
  struct

        val TableSize = 211
        val HashFactor = 5

        val hash = fn s =>
           foldl (fn (c,v)=>(v*HashFactor+(ord c)) mod TableSize) 0 (explode s)


        val HashTable = Array.array(TableSize,nil) :
                 (string * (int * int -> (svalue,int) token)) list Array.array


        val add = fn (s,v) =>
         let val i = hash s
         in Array.update(HashTable,i,(s,v) :: (Array.sub(HashTable, i)))
         end

        val find = fn s =>
          let val i = hash s
              fun f ((key,v)::r) = if s=key then SOME v else f r
                | f nil = NONE
          in  f (Array.sub(HashTable, i))
          end

        val _ =
            (List.app add
        [("and",YAND),
         ("array",YARRAY),
         ("begin",YBEGIN),
         ("case",YCASE),
         ("const",YCONST),
         ("div",YDIV),
         ("do",YDO),
         ("downto",YDOWNTO),
         ("else",YELSE),
         ("end",YEND),
         ("extern",YEXTERN),
         ("file",YFILE),
         ("for",YFOR),
         ("forward",YFORWARD),
         ("function",YFUNCTION),
         ("goto",YGOTO),
         ("hex",YHEX),
         ("if",YIF),
         ("in",YIN),
         ("label",YLABEL),
         ("mod",YMOD),
         ("nil",YNIL),
         ("not",YNOT),
         ("oct",YOCT),
         ("of",YOF),
         ("or",YOR),
         ("packed",YPACKED),
         ("procedure",YPROCEDURE),
         ("program",YPROG),
         ("record",YRECORD),
         ("repeat",YREPEAT),
         ("set",YSET),
         ("then",YTHEN),
         ("to",YTO),
         ("type",YTYPE),
         ("until",YUNTIL),
         ("var",YVAR),
         ("while",YWHILE),
         ("with",YWITH)
        ])
   end
   open KeyWord

(*#line 92.1 "pascal.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\048\050\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\048\007\007\007\007\007\007\045\043\042\041\040\039\038\036\035\
\\032\032\032\032\032\032\032\032\022\022\021\020\019\018\017\007\
\\007\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\016\007\015\014\007\
\\007\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\010\009\007\008\007\
\\007"
),
 (3, 
"\051\051\051\051\051\051\051\051\051\051\057\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\055\054\052\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051"
),
 (5, 
"\058\058\058\058\058\058\058\058\058\058\061\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\060\058\059\058\058\
\\058"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\000\
\\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\000\
\\024\024\024\024\024\024\024\024\024\024\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\024\024\024\024\024\024\024\024\024\024\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\000\
\\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\\034\034\034\034\034\034\034\034\026\026\000\000\000\000\000\000\
\\000\000\033\000\000\023\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\033\000\000\023\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\047\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\046\
\\046"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\051\051\051\051\051\051\051\051\051\051\000\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\000\000\000\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\051\
\\051"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\058\058\058\058\058\058\058\058\058\058\000\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\000\058\000\058\058\
\\058"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 97)], trans = 0},
{fin = [(N 77),(N 97)], trans = 0},
{fin = [(N 89),(N 97)], trans = 0},
{fin = [(N 95),(N 97)], trans = 0},
{fin = [(N 8),(N 12),(N 97)], trans = 11},
{fin = [(N 8),(N 12)], trans = 11},
{fin = [(N 12)], trans = 13},
{fin = [(N 71),(N 97)], trans = 0},
{fin = [(N 75),(N 97)], trans = 0},
{fin = [(N 73),(N 97)], trans = 0},
{fin = [(N 83),(N 97)], trans = 0},
{fin = [(N 81),(N 97)], trans = 0},
{fin = [(N 79),(N 97)], trans = 0},
{fin = [(N 65),(N 97)], trans = 0},
{fin = [(N 69),(N 97)], trans = 0},
{fin = [(N 40),(N 97)], trans = 22},
{fin = [], trans = 23},
{fin = [(N 35)], trans = 24},
{fin = [], trans = 24},
{fin = [(N 40)], trans = 22},
{fin = [], trans = 27},
{fin = [(N 35)], trans = 28},
{fin = [], trans = 29},
{fin = [(N 35)], trans = 30},
{fin = [], trans = 30},
{fin = [(N 40),(N 97)], trans = 32},
{fin = [(N 45)], trans = 0},
{fin = [(N 40)], trans = 32},
{fin = [(N 93),(N 97)], trans = 0},
{fin = [(N 59),(N 97)], trans = 36},
{fin = [(N 57)], trans = 0},
{fin = [(N 87),(N 97)], trans = 38},
{fin = [(N 67),(N 97)], trans = 0},
{fin = [(N 85),(N 97)], trans = 38},
{fin = [(N 91),(N 97)], trans = 0},
{fin = [(N 63),(N 97)], trans = 0},
{fin = [(N 61),(N 97)], trans = 43},
{fin = [(N 54)], trans = 0},
{fin = [(N 97)], trans = 45},
{fin = [], trans = 45},
{fin = [(N 51)], trans = 47},
{fin = [(N 2),(N 97)], trans = 48},
{fin = [(N 2)], trans = 48},
{fin = [(N 5)], trans = 50},
{fin = [(N 103)], trans = 51},
{fin = [(N 111)], trans = 52},
{fin = [(N 109)], trans = 0},
{fin = [(N 111)], trans = 0},
{fin = [(N 111)], trans = 55},
{fin = [(N 106)], trans = 0},
{fin = [(N 100)], trans = 57},
{fin = [(N 117)], trans = 58},
{fin = [(N 121)], trans = 0},
{fin = [(N 119)], trans = 0},
{fin = [(N 114)], trans = 61}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val B = STARTSTATE 5;
val C = STARTSTATE 3;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  100 => let val yytext=yymktext() in (*#line 131.21 "pascal.lex"*)lineNum := (!lineNum) + (String.size yytext); lex()(*#line 514.1 "pascal.lex.sml"*)
 end
| 103 => ((*#line 132.21 "pascal.lex"*)lex()(*#line 516.1 "pascal.lex.sml"*)
)
| 106 => ((*#line 133.21 "pascal.lex"*)lex()(*#line 518.1 "pascal.lex.sml"*)
)
| 109 => ((*#line 134.21 "pascal.lex"*)YYBEGIN INITIAL; lex()(*#line 520.1 "pascal.lex.sml"*)
)
| 111 => ((*#line 135.21 "pascal.lex"*)lex()(*#line 522.1 "pascal.lex.sml"*)
)
| 114 => let val yytext=yymktext() in (*#line 136.21 "pascal.lex"*)lineNum := (!lineNum) + (String.size yytext); lex()(*#line 524.1 "pascal.lex.sml"*)
 end
| 117 => ((*#line 137.21 "pascal.lex"*)lex()(*#line 526.1 "pascal.lex.sml"*)
)
| 119 => ((*#line 138.21 "pascal.lex"*)lex()(*#line 528.1 "pascal.lex.sml"*)
)
| 12 => ((*#line 104.41 "pascal.lex"*)YID(!lineNum,!lineNum)(*#line 530.1 "pascal.lex.sml"*)
)
| 121 => ((*#line 139.21 "pascal.lex"*)YYBEGIN INITIAL; lex()(*#line 532.1 "pascal.lex.sml"*)
)
| 2 => ((*#line 100.21 "pascal.lex"*)lex()(*#line 534.1 "pascal.lex.sml"*)
)
| 35 => ((*#line 105.60 "pascal.lex"*)YNUMB(!lineNum,!lineNum)(*#line 536.1 "pascal.lex.sml"*)
)
| 40 => ((*#line 106.33 "pascal.lex"*)YINT(!lineNum,!lineNum)(*#line 538.1 "pascal.lex.sml"*)
)
| 45 => ((*#line 107.31 "pascal.lex"*)YBINT(!lineNum,!lineNum)(*#line 540.1 "pascal.lex.sml"*)
)
| 5 => let val yytext=yymktext() in (*#line 101.21 "pascal.lex"*)lineNum := (!lineNum) + (String.size yytext); lex()(*#line 542.1 "pascal.lex.sml"*)
 end
| 51 => ((*#line 108.33 "pascal.lex"*)YSTRING(!lineNum,!lineNum)(*#line 544.1 "pascal.lex.sml"*)
)
| 54 => ((*#line 109.21 "pascal.lex"*)YYBEGIN C; lex()(*#line 546.1 "pascal.lex.sml"*)
)
| 57 => ((*#line 110.21 "pascal.lex"*)YDOTDOT(!lineNum,!lineNum)(*#line 548.1 "pascal.lex.sml"*)
)
| 59 => ((*#line 111.21 "pascal.lex"*)YDOT(!lineNum,!lineNum)(*#line 550.1 "pascal.lex.sml"*)
)
| 61 => ((*#line 112.21 "pascal.lex"*)YLPAR(!lineNum,!lineNum)(*#line 552.1 "pascal.lex.sml"*)
)
| 63 => ((*#line 113.21 "pascal.lex"*)YRPAR(!lineNum,!lineNum)(*#line 554.1 "pascal.lex.sml"*)
)
| 65 => ((*#line 114.21 "pascal.lex"*)YSEMI(!lineNum,!lineNum)(*#line 556.1 "pascal.lex.sml"*)
)
| 67 => ((*#line 115.21 "pascal.lex"*)YCOMMA(!lineNum,!lineNum)(*#line 558.1 "pascal.lex.sml"*)
)
| 69 => ((*#line 116.21 "pascal.lex"*)YCOLON(!lineNum,!lineNum)(*#line 560.1 "pascal.lex.sml"*)
)
| 71 => ((*#line 117.21 "pascal.lex"*)YCARET(!lineNum,!lineNum)(*#line 562.1 "pascal.lex.sml"*)
)
| 73 => ((*#line 118.21 "pascal.lex"*)YLBRA(!lineNum,!lineNum)(*#line 564.1 "pascal.lex.sml"*)
)
| 75 => ((*#line 119.21 "pascal.lex"*)YRBRA(!lineNum,!lineNum)(*#line 566.1 "pascal.lex.sml"*)
)
| 77 => ((*#line 120.21 "pascal.lex"*)YTILDE(!lineNum,!lineNum)(*#line 568.1 "pascal.lex.sml"*)
)
| 79 => ((*#line 121.21 "pascal.lex"*)YLESS(!lineNum,!lineNum)(*#line 570.1 "pascal.lex.sml"*)
)
| 8 => let val yytext=yymktext() in (*#line 102.23 "pascal.lex"*)case find yytext of SOME v => v(!lineNum,!lineNum)
                                                  | _ => YID(!lineNum,!lineNum)(*#line 573.1 "pascal.lex.sml"*)
 end
| 81 => ((*#line 122.21 "pascal.lex"*)YEQUAL(!lineNum,!lineNum)(*#line 575.1 "pascal.lex.sml"*)
)
| 83 => ((*#line 123.21 "pascal.lex"*)YGREATER(!lineNum,!lineNum)(*#line 577.1 "pascal.lex.sml"*)
)
| 85 => ((*#line 124.21 "pascal.lex"*)YPLUS(!lineNum,!lineNum)(*#line 579.1 "pascal.lex.sml"*)
)
| 87 => ((*#line 125.21 "pascal.lex"*)YMINUS(!lineNum,!lineNum)(*#line 581.1 "pascal.lex.sml"*)
)
| 89 => ((*#line 126.21 "pascal.lex"*)YBAR(!lineNum,!lineNum)(*#line 583.1 "pascal.lex.sml"*)
)
| 91 => ((*#line 127.21 "pascal.lex"*)YSTAR(!lineNum,!lineNum)(*#line 585.1 "pascal.lex.sml"*)
)
| 93 => ((*#line 128.21 "pascal.lex"*)YSLASH(!lineNum,!lineNum)(*#line 587.1 "pascal.lex.sml"*)
)
| 95 => ((*#line 129.21 "pascal.lex"*)YYBEGIN B; lex()(*#line 589.1 "pascal.lex.sml"*)
)
| 97 => ((*#line 130.21 "pascal.lex"*)YILLCH(!lineNum,!lineNum)(*#line 591.1 "pascal.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
